import { NgZone, InjectionToken } from '@angular/core';
import { FirebaseAppConfig, FirebaseOptions } from '@angular/fire';
import { analytics, app } from 'firebase';
import * as ɵngcc0 from '@angular/core';
export interface Config {
    [key: string]: any;
}
export declare const COLLECTION_ENABLED: InjectionToken<boolean>;
export declare const APP_VERSION: InjectionToken<string>;
export declare const APP_NAME: InjectionToken<string>;
export declare const DEBUG_MODE: InjectionToken<boolean>;
export declare const CONFIG: InjectionToken<Config>;
declare type AnalyticsProxy = {
    logEvent(eventName: string, eventParams?: {
        [key: string]: any;
    }, options?: analytics.AnalyticsCallOptions): Promise<void>;
    setCurrentScreen(screenName: string, options?: analytics.AnalyticsCallOptions): Promise<void>;
    setUserId(id: string, options?: analytics.AnalyticsCallOptions): Promise<void>;
    setUserProperties(properties: analytics.CustomParams, options?: analytics.AnalyticsCallOptions): Promise<void>;
    setAnalyticsCollectionEnabled(enabled: boolean): Promise<void>;
    app: Promise<app.App>;
};
export interface AngularFireAnalytics extends AnalyticsProxy {
}
export declare class AngularFireAnalytics {
    private options;
    private gtag;
    private analyticsInitialized;
    updateConfig(config: Config): Promise<void>;
    constructor(options: FirebaseOptions, nameOrConfig: string | FirebaseAppConfig | null | undefined, analyticsCollectionEnabled: boolean | null, providedAppVersion: string | null, providedAppName: string | null, debugModeEnabled: boolean | null, providedConfig: Config | null, platformId: Object, zone: NgZone);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AngularFireAnalytics>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<AngularFireAnalytics>;
}
export {};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5hbHl0aWNzLmQudHMiLCJzb3VyY2VzIjpbImFuYWx5dGljcy5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEwQkEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ1pvbmUsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGaXJlYmFzZUFwcENvbmZpZywgRmlyZWJhc2VPcHRpb25zIH0gZnJvbSAnQGFuZ3VsYXIvZmlyZSc7XG5pbXBvcnQgeyBhbmFseXRpY3MsIGFwcCB9IGZyb20gJ2ZpcmViYXNlJztcbmV4cG9ydCBpbnRlcmZhY2UgQ29uZmlnIHtcbiAgICBba2V5OiBzdHJpbmddOiBhbnk7XG59XG5leHBvcnQgZGVjbGFyZSBjb25zdCBDT0xMRUNUSU9OX0VOQUJMRUQ6IEluamVjdGlvblRva2VuPGJvb2xlYW4+O1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgQVBQX1ZFUlNJT046IEluamVjdGlvblRva2VuPHN0cmluZz47XG5leHBvcnQgZGVjbGFyZSBjb25zdCBBUFBfTkFNRTogSW5qZWN0aW9uVG9rZW48c3RyaW5nPjtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IERFQlVHX01PREU6IEluamVjdGlvblRva2VuPGJvb2xlYW4+O1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgQ09ORklHOiBJbmplY3Rpb25Ub2tlbjxDb25maWc+O1xuZGVjbGFyZSB0eXBlIEFuYWx5dGljc1Byb3h5ID0ge1xuICAgIGxvZ0V2ZW50KGV2ZW50TmFtZTogc3RyaW5nLCBldmVudFBhcmFtcz86IHtcbiAgICAgICAgW2tleTogc3RyaW5nXTogYW55O1xuICAgIH0sIG9wdGlvbnM/OiBhbmFseXRpY3MuQW5hbHl0aWNzQ2FsbE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+O1xuICAgIHNldEN1cnJlbnRTY3JlZW4oc2NyZWVuTmFtZTogc3RyaW5nLCBvcHRpb25zPzogYW5hbHl0aWNzLkFuYWx5dGljc0NhbGxPcHRpb25zKTogUHJvbWlzZTx2b2lkPjtcbiAgICBzZXRVc2VySWQoaWQ6IHN0cmluZywgb3B0aW9ucz86IGFuYWx5dGljcy5BbmFseXRpY3NDYWxsT3B0aW9ucyk6IFByb21pc2U8dm9pZD47XG4gICAgc2V0VXNlclByb3BlcnRpZXMocHJvcGVydGllczogYW5hbHl0aWNzLkN1c3RvbVBhcmFtcywgb3B0aW9ucz86IGFuYWx5dGljcy5BbmFseXRpY3NDYWxsT3B0aW9ucyk6IFByb21pc2U8dm9pZD47XG4gICAgc2V0QW5hbHl0aWNzQ29sbGVjdGlvbkVuYWJsZWQoZW5hYmxlZDogYm9vbGVhbik6IFByb21pc2U8dm9pZD47XG4gICAgYXBwOiBQcm9taXNlPGFwcC5BcHA+O1xufTtcbmV4cG9ydCBpbnRlcmZhY2UgQW5ndWxhckZpcmVBbmFseXRpY3MgZXh0ZW5kcyBBbmFseXRpY3NQcm94eSB7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBbmd1bGFyRmlyZUFuYWx5dGljcyB7XG4gICAgcHJpdmF0ZSBvcHRpb25zO1xuICAgIHByaXZhdGUgZ3RhZztcbiAgICBwcml2YXRlIGFuYWx5dGljc0luaXRpYWxpemVkO1xuICAgIHVwZGF0ZUNvbmZpZyhjb25maWc6IENvbmZpZyk6IFByb21pc2U8dm9pZD47XG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogRmlyZWJhc2VPcHRpb25zLCBuYW1lT3JDb25maWc6IHN0cmluZyB8IEZpcmViYXNlQXBwQ29uZmlnIHwgbnVsbCB8IHVuZGVmaW5lZCwgYW5hbHl0aWNzQ29sbGVjdGlvbkVuYWJsZWQ6IGJvb2xlYW4gfCBudWxsLCBwcm92aWRlZEFwcFZlcnNpb246IHN0cmluZyB8IG51bGwsIHByb3ZpZGVkQXBwTmFtZTogc3RyaW5nIHwgbnVsbCwgZGVidWdNb2RlRW5hYmxlZDogYm9vbGVhbiB8IG51bGwsIHByb3ZpZGVkQ29uZmlnOiBDb25maWcgfCBudWxsLCBwbGF0Zm9ybUlkOiBPYmplY3QsIHpvbmU6IE5nWm9uZSk7XG59XG5leHBvcnQge307XG4iXX0=