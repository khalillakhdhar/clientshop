(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),exports, require('rxjs'), require('rxjs/operators'), require('@angular/core'), require('@angular/fire'), require('@angular/common'), require('firebase/app'), require('firebase/firestore')) :
    typeof define === 'function' && define.amd ? define(['@angular/core','exports', 'rxjs', 'rxjs/operators', '@angular/core', '@angular/fire', '@angular/common', 'firebase/app', 'firebase/firestore'], factory) :
    (factory(global.ng.core,(global.angularfire2 = global.angularfire2 || {}, global.angularfire2.firestore = {}),global.rxjs,global.rxjs.operators,global.ng.core,global.angularfire2,global.ng.common,global.firebase));
}(this, (function (Éµngcc0,exports,rxjs,operators,core,fire,common,firebase) { 'use strict';

    firebase = firebase && firebase.hasOwnProperty('default') ? firebase['default'] : firebase;

    function _fromRef(ref, scheduler) {
        if (scheduler === void 0) { scheduler = rxjs.asyncScheduler; }
        return new rxjs.Observable(function (subscriber) {
            var unsubscribe;
            if (scheduler != null) {
                scheduler.schedule(function () {
                    unsubscribe = ref.onSnapshot(subscriber);
                });
            }
            else {
                unsubscribe = ref.onSnapshot(subscriber);
            }
            return function () {
                if (unsubscribe != null) {
                    unsubscribe();
                }
            };
        });
    }
    function fromRef(ref, scheduler) {
        return _fromRef(ref, scheduler);
    }
    function fromDocRef(ref, scheduler) {
        return fromRef(ref, scheduler)
            .pipe(operators.map(function (payload) { return ({ payload: payload, type: 'value' }); }));
    }
    function fromCollectionRef(ref, scheduler) {
        return fromRef(ref, scheduler).pipe(operators.map(function (payload) { return ({ payload: payload, type: 'query' }); }));
    }

    function docChanges(query, scheduler) {
        return fromCollectionRef(query, scheduler)
            .pipe(operators.map(function (action) {
            return action.payload.docChanges()
                .map(function (change) { return ({ type: change.type, payload: change }); });
        }));
    }
    function sortedChanges(query, events, scheduler) {
        return fromCollectionRef(query, scheduler)
            .pipe(operators.map(function (changes) { return changes.payload.docChanges(); }), operators.scan(function (current, changes) { return combineChanges(current, changes, events); }, []), operators.map(function (changes) { return changes.map(function (c) { return ({ type: c.type, payload: c }); }); }));
    }
    function combineChanges(current, changes, events) {
        changes.forEach(function (change) {
            if (events.indexOf(change.type) > -1) {
                current = combineChange(current, change);
            }
        });
        return current;
    }
    function combineChange(combined, change) {
        switch (change.type) {
            case 'added':
                if (combined[change.newIndex] && combined[change.newIndex].doc.ref.isEqual(change.doc.ref)) ;
                else {
                    combined.splice(change.newIndex, 0, change);
                }
                break;
            case 'modified':
                if (combined[change.oldIndex] == null || combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {
                    if (change.oldIndex !== change.newIndex) {
                        combined.splice(change.oldIndex, 1);
                        combined.splice(change.newIndex, 0, change);
                    }
                    else {
                        combined.splice(change.newIndex, 1, change);
                    }
                }
                break;
            case 'removed':
                if (combined[change.oldIndex] && combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {
                    combined.splice(change.oldIndex, 1);
                }
                break;
        }
        return combined;
    }

    var __assign = (undefined && undefined.__assign) || function () {
        __assign = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function validateEventsArray(events) {
        if (!events || events.length === 0) {
            events = ['added', 'removed', 'modified'];
        }
        return events;
    }
    var AngularFirestoreCollection = (function () {
        function AngularFirestoreCollection(ref, query, afs) {
            this.ref = ref;
            this.query = query;
            this.afs = afs;
        }
        AngularFirestoreCollection.prototype.stateChanges = function (events) {
            if (!events || events.length === 0) {
                return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(this.afs.keepUnstableUntilFirst);
            }
            return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(this.afs.keepUnstableUntilFirst, operators.map(function (actions) { return actions.filter(function (change) { return events.indexOf(change.type) > -1; }); }), operators.filter(function (changes) { return changes.length > 0; }));
        };
        AngularFirestoreCollection.prototype.auditTrail = function (events) {
            return this.stateChanges(events).pipe(operators.scan(function (current, action) { return current.concat(action); }, []));
        };
        AngularFirestoreCollection.prototype.snapshotChanges = function (events) {
            var validatedEvents = validateEventsArray(events);
            var scheduledSortedChanges$ = sortedChanges(this.query, validatedEvents, this.afs.schedulers.outsideAngular);
            return scheduledSortedChanges$.pipe(this.afs.keepUnstableUntilFirst);
        };
        AngularFirestoreCollection.prototype.valueChanges = function (options) {
            if (options === void 0) { options = {}; }
            return fromCollectionRef(this.query, this.afs.schedulers.outsideAngular)
                .pipe(this.afs.keepUnstableUntilFirst, operators.map(function (actions) { return actions.payload.docs.map(function (a) {
                var _a;
                if (options.idField) {
                    return __assign({}, a.data(), (_a = {}, _a[options.idField] = a.id, _a));
                }
                else {
                    return a.data();
                }
            }); }));
        };
        AngularFirestoreCollection.prototype.get = function (options) {
            return rxjs.from(this.query.get(options)).pipe(operators.observeOn(this.afs.schedulers.insideAngular));
        };
        AngularFirestoreCollection.prototype.add = function (data) {
            return this.ref.add(data);
        };
        AngularFirestoreCollection.prototype.doc = function (path) {
            return new AngularFirestoreDocument(this.ref.doc(path), this.afs);
        };
        return AngularFirestoreCollection;
    }());

    var AngularFirestoreDocument = (function () {
        function AngularFirestoreDocument(ref, afs) {
            this.ref = ref;
            this.afs = afs;
        }
        AngularFirestoreDocument.prototype.set = function (data, options) {
            return this.ref.set(data, options);
        };
        AngularFirestoreDocument.prototype.update = function (data) {
            return this.ref.update(data);
        };
        AngularFirestoreDocument.prototype.delete = function () {
            return this.ref.delete();
        };
        AngularFirestoreDocument.prototype.collection = function (path, queryFn) {
            var collectionRef = this.ref.collection(path);
            var _a = associateQuery(collectionRef, queryFn), ref = _a.ref, query = _a.query;
            return new AngularFirestoreCollection(ref, query, this.afs);
        };
        AngularFirestoreDocument.prototype.snapshotChanges = function () {
            var scheduledFromDocRef$ = fromDocRef(this.ref, this.afs.schedulers.outsideAngular);
            return scheduledFromDocRef$.pipe(this.afs.keepUnstableUntilFirst);
        };
        AngularFirestoreDocument.prototype.valueChanges = function () {
            return this.snapshotChanges().pipe(operators.map(function (action) {
                return action.payload.data();
            }));
        };
        AngularFirestoreDocument.prototype.get = function (options) {
            return rxjs.from(this.ref.get(options)).pipe(operators.observeOn(this.afs.schedulers.insideAngular));
        };
        return AngularFirestoreDocument;
    }());

    var AngularFirestoreCollectionGroup = (function () {
        function AngularFirestoreCollectionGroup(query, afs) {
            this.query = query;
            this.afs = afs;
        }
        AngularFirestoreCollectionGroup.prototype.stateChanges = function (events) {
            if (!events || events.length === 0) {
                return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(this.afs.keepUnstableUntilFirst);
            }
            return docChanges(this.query, this.afs.schedulers.outsideAngular)
                .pipe(this.afs.keepUnstableUntilFirst, operators.map(function (actions) { return actions.filter(function (change) { return events.indexOf(change.type) > -1; }); }), operators.filter(function (changes) { return changes.length > 0; }));
        };
        AngularFirestoreCollectionGroup.prototype.auditTrail = function (events) {
            return this.stateChanges(events).pipe(operators.scan(function (current, action) { return current.concat(action); }, []));
        };
        AngularFirestoreCollectionGroup.prototype.snapshotChanges = function (events) {
            var validatedEvents = validateEventsArray(events);
            var scheduledSortedChanges$ = sortedChanges(this.query, validatedEvents, this.afs.schedulers.outsideAngular);
            return scheduledSortedChanges$.pipe(this.afs.keepUnstableUntilFirst);
        };
        AngularFirestoreCollectionGroup.prototype.valueChanges = function () {
            var fromCollectionRefScheduled$ = fromCollectionRef(this.query, this.afs.schedulers.outsideAngular);
            return fromCollectionRefScheduled$
                .pipe(this.afs.keepUnstableUntilFirst, operators.map(function (actions) { return actions.payload.docs.map(function (a) { return a.data(); }); }));
        };
        AngularFirestoreCollectionGroup.prototype.get = function (options) {
            return rxjs.from(this.query.get(options)).pipe(operators.observeOn(this.afs.schedulers.insideAngular));
        };
        return AngularFirestoreCollectionGroup;
    }());

    var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __param = (undefined && undefined.__param) || function (paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    };
    var EnablePersistenceToken = new core.InjectionToken('angularfire2.enableFirestorePersistence');
    var PersistenceSettingsToken = new core.InjectionToken('angularfire2.firestore.persistenceSettings');
    var FirestoreSettingsToken = new core.InjectionToken('angularfire2.firestore.settings');
    var ENABLE_PERSISTENCE = EnablePersistenceToken;
    var PERSISTENCE_SETTINGS = PersistenceSettingsToken;
    var SETTINGS = FirestoreSettingsToken;
    var major = parseInt(firebase.SDK_VERSION.split('.')[0]);
    var minor = parseInt(firebase.SDK_VERSION.split('.')[1]);
    var DefaultFirestoreSettings = ((major < 5 || (major == 5 && minor < 8)) ? { timestampsInSnapshots: true } : {});
    function associateQuery(collectionRef, queryFn) {
        if (queryFn === void 0) { queryFn = function (ref) { return ref; }; }
        var query = queryFn(collectionRef);
        var ref = collectionRef;
        return { query: query, ref: ref };
    }
    var AngularFirestore = (function () {
        function AngularFirestore(options, nameOrConfig, shouldEnablePersistence, settings, platformId, zone, persistenceSettings) {
            var _this = this;
            this.schedulers = new fire.ÉµAngularFireSchedulers(zone);
            this.keepUnstableUntilFirst = fire.ÉµkeepUnstableUntilFirstFactory(this.schedulers, platformId);
            this.firestore = zone.runOutsideAngular(function () {
                var app = fire._firebaseAppFactory(options, zone, nameOrConfig);
                var firestore$$1 = app.firestore();
                firestore$$1.settings(settings || DefaultFirestoreSettings);
                return firestore$$1;
            });
            if (shouldEnablePersistence && !common.isPlatformServer(platformId)) {
                var enablePersistence = function () {
                    try {
                        return rxjs.from(_this.firestore.enablePersistence(persistenceSettings || undefined).then(function () { return true; }, function () { return false; }));
                    }
                    catch (e) {
                        return rxjs.of(false);
                    }
                };
                this.persistenceEnabled$ = zone.runOutsideAngular(enablePersistence);
            }
            else {
                this.persistenceEnabled$ = rxjs.of(false);
            }
        }
        AngularFirestore.prototype.collection = function (pathOrRef, queryFn) {
            var collectionRef;
            if (typeof pathOrRef === 'string') {
                collectionRef = this.firestore.collection(pathOrRef);
            }
            else {
                collectionRef = pathOrRef;
            }
            var _a = associateQuery(collectionRef, queryFn), ref = _a.ref, query = _a.query;
            return new AngularFirestoreCollection(ref, query, this);
        };
        AngularFirestore.prototype.collectionGroup = function (collectionId, queryGroupFn) {
            if (major < 6) {
                throw "collection group queries require Firebase JS SDK >= 6.0";
            }
            var queryFn = queryGroupFn || (function (ref) { return ref; });
            var firestore$$1 = this.firestore;
            var collectionGroup = firestore$$1.collectionGroup(collectionId);
            return new AngularFirestoreCollectionGroup(queryFn(collectionGroup), this);
        };
        AngularFirestore.prototype.doc = function (pathOrRef) {
            var ref;
            if (typeof pathOrRef === 'string') {
                ref = this.firestore.doc(pathOrRef);
            }
            else {
                ref = pathOrRef;
            }
            return new AngularFirestoreDocument(ref, this);
        };
        AngularFirestore.prototype.createId = function () {
            return this.firestore.collection('_').doc().id;
        };
        AngularFirestore = __decorate([ __param(0, core.Inject(fire.FIREBASE_OPTIONS)),
            __param(1, core.Optional()), __param(1, core.Inject(fire.FIREBASE_APP_NAME)),
            __param(2, core.Optional()), __param(2, core.Inject(ENABLE_PERSISTENCE)),
            __param(3, core.Optional()), __param(3, core.Inject(SETTINGS)),
            __param(4, core.Inject(core.PLATFORM_ID)),
            __param(6, core.Optional()), __param(6, core.Inject(PERSISTENCE_SETTINGS)),
            __metadata("design:paramtypes", [Object, Object, Object, Object, Object,
                core.NgZone, Object])
        ], AngularFirestore);
AngularFirestore.Éµfac = function AngularFirestore_Factory(t) { return new (t || AngularFirestore)(Éµngcc0.ÉµÉµinject(fire.FIREBASE_OPTIONS), Éµngcc0.ÉµÉµinject(fire.FIREBASE_APP_NAME, 8), Éµngcc0.ÉµÉµinject(ENABLE_PERSISTENCE, 8), Éµngcc0.ÉµÉµinject(SETTINGS, 8), Éµngcc0.ÉµÉµinject(core.PLATFORM_ID), Éµngcc0.ÉµÉµinject(Éµngcc0.NgZone), Éµngcc0.ÉµÉµinject(PERSISTENCE_SETTINGS, 8)); };
AngularFirestore.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({ token: AngularFirestore, factory: function (t) { return AngularFirestore.Éµfac(t); } });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(AngularFirestore, [{
        type: core.Injectable
    }], function () { return [{ type: Object, decorators: [{
                type: core.Inject,
                args: [fire.FIREBASE_OPTIONS]
            }] }, { type: Object, decorators: [{
                type: core.Optional
            }, {
                type: core.Inject,
                args: [fire.FIREBASE_APP_NAME]
            }] }, { type: Object, decorators: [{
                type: core.Optional
            }, {
                type: core.Inject,
                args: [ENABLE_PERSISTENCE]
            }] }, { type: Object, decorators: [{
                type: core.Optional
            }, {
                type: core.Inject,
                args: [SETTINGS]
            }] }, { type: Object, decorators: [{
                type: core.Inject,
                args: [core.PLATFORM_ID]
            }] }, { type: Éµngcc0.NgZone }, { type: Object, decorators: [{
                type: core.Optional
            }, {
                type: core.Inject,
                args: [PERSISTENCE_SETTINGS]
            }] }]; }, null); })();
        return AngularFirestore;
    }());

    var __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AngularFirestoreModule = (function () {
        function AngularFirestoreModule() {
        }
        AngularFirestoreModule_1 = AngularFirestoreModule;
        AngularFirestoreModule.enablePersistence = function (persistenceSettings) {
            return {
                ngModule: AngularFirestoreModule_1,
                providers: [
                    { provide: EnablePersistenceToken, useValue: true },
                    { provide: PersistenceSettingsToken, useValue: persistenceSettings },
                ]
            };
        };
        var AngularFirestoreModule_1;
AngularFirestoreModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({ type: AngularFirestoreModule });
AngularFirestoreModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({ factory: function AngularFirestoreModule_Factory(t) { return new (t || AngularFirestoreModule)(); }, providers: [AngularFirestore] });
/*@__PURE__*/ (function () { Éµngcc0.ÉµsetClassMetadata(AngularFirestoreModule, [{
        type: core.NgModule,
        args: [{
                providers: [AngularFirestore]
            }]
    }], function () { return []; }, null); })();
        return AngularFirestoreModule;
    }());

    exports.EnablePersistenceToken = EnablePersistenceToken;
    exports.PersistenceSettingsToken = PersistenceSettingsToken;
    exports.FirestoreSettingsToken = FirestoreSettingsToken;
    exports.ENABLE_PERSISTENCE = ENABLE_PERSISTENCE;
    exports.PERSISTENCE_SETTINGS = PERSISTENCE_SETTINGS;
    exports.SETTINGS = SETTINGS;
    exports.DefaultFirestoreSettings = DefaultFirestoreSettings;
    exports.associateQuery = associateQuery;
    exports.AngularFirestore = AngularFirestore;
    exports.AngularFirestoreModule = AngularFirestoreModule;
    exports.validateEventsArray = validateEventsArray;
    exports.AngularFirestoreCollection = AngularFirestoreCollection;
    exports.AngularFirestoreCollectionGroup = AngularFirestoreCollectionGroup;
    exports.AngularFirestoreDocument = AngularFirestoreDocument;
    exports.docChanges = docChanges;
    exports.sortedChanges = sortedChanges;
    exports.combineChanges = combineChanges;
    exports.combineChange = combineChange;
    exports.fromRef = fromRef;
    exports.fromDocRef = fromDocRef;
    exports.fromCollectionRef = fromCollectionRef;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlyZXN0b3JlLnVtZC5qcyIsInNvdXJjZXMiOlsiZmlyZXN0b3JlLnVtZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtvR0FDMkU7eUVBQ2xCOzRCQUM1QzswQkFDTTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3VDQXNTb0IsQUFFNUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztrQ0FRa0I7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3FDQXVCUTs7Ozs7Ozs7Z0RBS0YiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgncnhqcycpLCByZXF1aXJlKCdyeGpzL29wZXJhdG9ycycpLCByZXF1aXJlKCdAYW5ndWxhci9jb3JlJyksIHJlcXVpcmUoJ0Bhbmd1bGFyL2ZpcmUnKSwgcmVxdWlyZSgnQGFuZ3VsYXIvY29tbW9uJyksIHJlcXVpcmUoJ2ZpcmViYXNlL2FwcCcpLCByZXF1aXJlKCdmaXJlYmFzZS9maXJlc3RvcmUnKSkgOlxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ2V4cG9ydHMnLCAncnhqcycsICdyeGpzL29wZXJhdG9ycycsICdAYW5ndWxhci9jb3JlJywgJ0Bhbmd1bGFyL2ZpcmUnLCAnQGFuZ3VsYXIvY29tbW9uJywgJ2ZpcmViYXNlL2FwcCcsICdmaXJlYmFzZS9maXJlc3RvcmUnXSwgZmFjdG9yeSkgOlxuICAgIChmYWN0b3J5KChnbG9iYWwuYW5ndWxhcmZpcmUyID0gZ2xvYmFsLmFuZ3VsYXJmaXJlMiB8fCB7fSwgZ2xvYmFsLmFuZ3VsYXJmaXJlMi5maXJlc3RvcmUgPSB7fSksZ2xvYmFsLnJ4anMsZ2xvYmFsLnJ4anMub3BlcmF0b3JzLGdsb2JhbC5uZy5jb3JlLGdsb2JhbC5hbmd1bGFyZmlyZTIsZ2xvYmFsLm5nLmNvbW1vbixnbG9iYWwuZmlyZWJhc2UpKTtcbn0odGhpcywgKGZ1bmN0aW9uIChleHBvcnRzLHJ4anMsb3BlcmF0b3JzLGNvcmUsZmlyZSxjb21tb24sZmlyZWJhc2UpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgZmlyZWJhc2UgPSBmaXJlYmFzZSAmJiBmaXJlYmFzZS5oYXNPd25Qcm9wZXJ0eSgnZGVmYXVsdCcpID8gZmlyZWJhc2VbJ2RlZmF1bHQnXSA6IGZpcmViYXNlO1xuXG4gICAgZnVuY3Rpb24gX2Zyb21SZWYocmVmLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgaWYgKHNjaGVkdWxlciA9PT0gdm9pZCAwKSB7IHNjaGVkdWxlciA9IHJ4anMuYXN5bmNTY2hlZHVsZXI7IH1cbiAgICAgICAgcmV0dXJuIG5ldyByeGpzLk9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgIHZhciB1bnN1YnNjcmliZTtcbiAgICAgICAgICAgIGlmIChzY2hlZHVsZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlID0gcmVmLm9uU25hcHNob3Qoc3Vic2NyaWJlcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB1bnN1YnNjcmliZSA9IHJlZi5vblNuYXBzaG90KHN1YnNjcmliZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAodW5zdWJzY3JpYmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmcm9tUmVmKHJlZiwgc2NoZWR1bGVyKSB7XG4gICAgICAgIHJldHVybiBfZnJvbVJlZihyZWYsIHNjaGVkdWxlcik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZyb21Eb2NSZWYocmVmLCBzY2hlZHVsZXIpIHtcbiAgICAgICAgcmV0dXJuIGZyb21SZWYocmVmLCBzY2hlZHVsZXIpXG4gICAgICAgICAgICAucGlwZShvcGVyYXRvcnMubWFwKGZ1bmN0aW9uIChwYXlsb2FkKSB7IHJldHVybiAoeyBwYXlsb2FkOiBwYXlsb2FkLCB0eXBlOiAndmFsdWUnIH0pOyB9KSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZyb21Db2xsZWN0aW9uUmVmKHJlZiwgc2NoZWR1bGVyKSB7XG4gICAgICAgIHJldHVybiBmcm9tUmVmKHJlZiwgc2NoZWR1bGVyKS5waXBlKG9wZXJhdG9ycy5tYXAoZnVuY3Rpb24gKHBheWxvYWQpIHsgcmV0dXJuICh7IHBheWxvYWQ6IHBheWxvYWQsIHR5cGU6ICdxdWVyeScgfSk7IH0pKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkb2NDaGFuZ2VzKHF1ZXJ5LCBzY2hlZHVsZXIpIHtcbiAgICAgICAgcmV0dXJuIGZyb21Db2xsZWN0aW9uUmVmKHF1ZXJ5LCBzY2hlZHVsZXIpXG4gICAgICAgICAgICAucGlwZShvcGVyYXRvcnMubWFwKGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBhY3Rpb24ucGF5bG9hZC5kb2NDaGFuZ2VzKClcbiAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChjaGFuZ2UpIHsgcmV0dXJuICh7IHR5cGU6IGNoYW5nZS50eXBlLCBwYXlsb2FkOiBjaGFuZ2UgfSk7IH0pO1xuICAgICAgICB9KSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNvcnRlZENoYW5nZXMocXVlcnksIGV2ZW50cywgc2NoZWR1bGVyKSB7XG4gICAgICAgIHJldHVybiBmcm9tQ29sbGVjdGlvblJlZihxdWVyeSwgc2NoZWR1bGVyKVxuICAgICAgICAgICAgLnBpcGUob3BlcmF0b3JzLm1hcChmdW5jdGlvbiAoY2hhbmdlcykgeyByZXR1cm4gY2hhbmdlcy5wYXlsb2FkLmRvY0NoYW5nZXMoKTsgfSksIG9wZXJhdG9ycy5zY2FuKGZ1bmN0aW9uIChjdXJyZW50LCBjaGFuZ2VzKSB7IHJldHVybiBjb21iaW5lQ2hhbmdlcyhjdXJyZW50LCBjaGFuZ2VzLCBldmVudHMpOyB9LCBbXSksIG9wZXJhdG9ycy5tYXAoZnVuY3Rpb24gKGNoYW5nZXMpIHsgcmV0dXJuIGNoYW5nZXMubWFwKGZ1bmN0aW9uIChjKSB7IHJldHVybiAoeyB0eXBlOiBjLnR5cGUsIHBheWxvYWQ6IGMgfSk7IH0pOyB9KSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvbWJpbmVDaGFuZ2VzKGN1cnJlbnQsIGNoYW5nZXMsIGV2ZW50cykge1xuICAgICAgICBjaGFuZ2VzLmZvckVhY2goZnVuY3Rpb24gKGNoYW5nZSkge1xuICAgICAgICAgICAgaWYgKGV2ZW50cy5pbmRleE9mKGNoYW5nZS50eXBlKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IGNvbWJpbmVDaGFuZ2UoY3VycmVudCwgY2hhbmdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjdXJyZW50O1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21iaW5lQ2hhbmdlKGNvbWJpbmVkLCBjaGFuZ2UpIHtcbiAgICAgICAgc3dpdGNoIChjaGFuZ2UudHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnYWRkZWQnOlxuICAgICAgICAgICAgICAgIGlmIChjb21iaW5lZFtjaGFuZ2UubmV3SW5kZXhdICYmIGNvbWJpbmVkW2NoYW5nZS5uZXdJbmRleF0uZG9jLnJlZi5pc0VxdWFsKGNoYW5nZS5kb2MucmVmKSkgO1xuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb21iaW5lZC5zcGxpY2UoY2hhbmdlLm5ld0luZGV4LCAwLCBjaGFuZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21vZGlmaWVkJzpcbiAgICAgICAgICAgICAgICBpZiAoY29tYmluZWRbY2hhbmdlLm9sZEluZGV4XSA9PSBudWxsIHx8IGNvbWJpbmVkW2NoYW5nZS5vbGRJbmRleF0uZG9jLnJlZi5pc0VxdWFsKGNoYW5nZS5kb2MucmVmKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhbmdlLm9sZEluZGV4ICE9PSBjaGFuZ2UubmV3SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbWJpbmVkLnNwbGljZShjaGFuZ2Uub2xkSW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29tYmluZWQuc3BsaWNlKGNoYW5nZS5uZXdJbmRleCwgMCwgY2hhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbWJpbmVkLnNwbGljZShjaGFuZ2UubmV3SW5kZXgsIDEsIGNoYW5nZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdyZW1vdmVkJzpcbiAgICAgICAgICAgICAgICBpZiAoY29tYmluZWRbY2hhbmdlLm9sZEluZGV4XSAmJiBjb21iaW5lZFtjaGFuZ2Uub2xkSW5kZXhdLmRvYy5yZWYuaXNFcXVhbChjaGFuZ2UuZG9jLnJlZikpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tYmluZWQuc3BsaWNlKGNoYW5nZS5vbGRJbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb21iaW5lZDtcbiAgICB9XG5cbiAgICB2YXIgX19hc3NpZ24gPSAodW5kZWZpbmVkICYmIHVuZGVmaW5lZC5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHQ7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gICAgZnVuY3Rpb24gdmFsaWRhdGVFdmVudHNBcnJheShldmVudHMpIHtcbiAgICAgICAgaWYgKCFldmVudHMgfHwgZXZlbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZXZlbnRzID0gWydhZGRlZCcsICdyZW1vdmVkJywgJ21vZGlmaWVkJ107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV2ZW50cztcbiAgICB9XG4gICAgdmFyIEFuZ3VsYXJGaXJlc3RvcmVDb2xsZWN0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gQW5ndWxhckZpcmVzdG9yZUNvbGxlY3Rpb24ocmVmLCBxdWVyeSwgYWZzKSB7XG4gICAgICAgICAgICB0aGlzLnJlZiA9IHJlZjtcbiAgICAgICAgICAgIHRoaXMucXVlcnkgPSBxdWVyeTtcbiAgICAgICAgICAgIHRoaXMuYWZzID0gYWZzO1xuICAgICAgICB9XG4gICAgICAgIEFuZ3VsYXJGaXJlc3RvcmVDb2xsZWN0aW9uLnByb3RvdHlwZS5zdGF0ZUNoYW5nZXMgPSBmdW5jdGlvbiAoZXZlbnRzKSB7XG4gICAgICAgICAgICBpZiAoIWV2ZW50cyB8fCBldmVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvY0NoYW5nZXModGhpcy5xdWVyeSwgdGhpcy5hZnMuc2NoZWR1bGVycy5vdXRzaWRlQW5ndWxhcikucGlwZSh0aGlzLmFmcy5rZWVwVW5zdGFibGVVbnRpbEZpcnN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkb2NDaGFuZ2VzKHRoaXMucXVlcnksIHRoaXMuYWZzLnNjaGVkdWxlcnMub3V0c2lkZUFuZ3VsYXIpLnBpcGUodGhpcy5hZnMua2VlcFVuc3RhYmxlVW50aWxGaXJzdCwgb3BlcmF0b3JzLm1hcChmdW5jdGlvbiAoYWN0aW9ucykgeyByZXR1cm4gYWN0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKGNoYW5nZSkgeyByZXR1cm4gZXZlbnRzLmluZGV4T2YoY2hhbmdlLnR5cGUpID4gLTE7IH0pOyB9KSwgb3BlcmF0b3JzLmZpbHRlcihmdW5jdGlvbiAoY2hhbmdlcykgeyByZXR1cm4gY2hhbmdlcy5sZW5ndGggPiAwOyB9KSk7XG4gICAgICAgIH07XG4gICAgICAgIEFuZ3VsYXJGaXJlc3RvcmVDb2xsZWN0aW9uLnByb3RvdHlwZS5hdWRpdFRyYWlsID0gZnVuY3Rpb24gKGV2ZW50cykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGVDaGFuZ2VzKGV2ZW50cykucGlwZShvcGVyYXRvcnMuc2NhbihmdW5jdGlvbiAoY3VycmVudCwgYWN0aW9uKSB7IHJldHVybiBjdXJyZW50LmNvbmNhdChhY3Rpb24pOyB9LCBbXSkpO1xuICAgICAgICB9O1xuICAgICAgICBBbmd1bGFyRmlyZXN0b3JlQ29sbGVjdGlvbi5wcm90b3R5cGUuc25hcHNob3RDaGFuZ2VzID0gZnVuY3Rpb24gKGV2ZW50cykge1xuICAgICAgICAgICAgdmFyIHZhbGlkYXRlZEV2ZW50cyA9IHZhbGlkYXRlRXZlbnRzQXJyYXkoZXZlbnRzKTtcbiAgICAgICAgICAgIHZhciBzY2hlZHVsZWRTb3J0ZWRDaGFuZ2VzJCA9IHNvcnRlZENoYW5nZXModGhpcy5xdWVyeSwgdmFsaWRhdGVkRXZlbnRzLCB0aGlzLmFmcy5zY2hlZHVsZXJzLm91dHNpZGVBbmd1bGFyKTtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZWRTb3J0ZWRDaGFuZ2VzJC5waXBlKHRoaXMuYWZzLmtlZXBVbnN0YWJsZVVudGlsRmlyc3QpO1xuICAgICAgICB9O1xuICAgICAgICBBbmd1bGFyRmlyZXN0b3JlQ29sbGVjdGlvbi5wcm90b3R5cGUudmFsdWVDaGFuZ2VzID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHsgb3B0aW9ucyA9IHt9OyB9XG4gICAgICAgICAgICByZXR1cm4gZnJvbUNvbGxlY3Rpb25SZWYodGhpcy5xdWVyeSwgdGhpcy5hZnMuc2NoZWR1bGVycy5vdXRzaWRlQW5ndWxhcilcbiAgICAgICAgICAgICAgICAucGlwZSh0aGlzLmFmcy5rZWVwVW5zdGFibGVVbnRpbEZpcnN0LCBvcGVyYXRvcnMubWFwKGZ1bmN0aW9uIChhY3Rpb25zKSB7IHJldHVybiBhY3Rpb25zLnBheWxvYWQuZG9jcy5tYXAoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuaWRGaWVsZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX19hc3NpZ24oe30sIGEuZGF0YSgpLCAoX2EgPSB7fSwgX2Fbb3B0aW9ucy5pZEZpZWxkXSA9IGEuaWQsIF9hKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS5kYXRhKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7IH0pKTtcbiAgICAgICAgfTtcbiAgICAgICAgQW5ndWxhckZpcmVzdG9yZUNvbGxlY3Rpb24ucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gcnhqcy5mcm9tKHRoaXMucXVlcnkuZ2V0KG9wdGlvbnMpKS5waXBlKG9wZXJhdG9ycy5vYnNlcnZlT24odGhpcy5hZnMuc2NoZWR1bGVycy5pbnNpZGVBbmd1bGFyKSk7XG4gICAgICAgIH07XG4gICAgICAgIEFuZ3VsYXJGaXJlc3RvcmVDb2xsZWN0aW9uLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVmLmFkZChkYXRhKTtcbiAgICAgICAgfTtcbiAgICAgICAgQW5ndWxhckZpcmVzdG9yZUNvbGxlY3Rpb24ucHJvdG90eXBlLmRvYyA9IGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEFuZ3VsYXJGaXJlc3RvcmVEb2N1bWVudCh0aGlzLnJlZi5kb2MocGF0aCksIHRoaXMuYWZzKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIEFuZ3VsYXJGaXJlc3RvcmVDb2xsZWN0aW9uO1xuICAgIH0oKSk7XG5cbiAgICB2YXIgQW5ndWxhckZpcmVzdG9yZURvY3VtZW50ID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gQW5ndWxhckZpcmVzdG9yZURvY3VtZW50KHJlZiwgYWZzKSB7XG4gICAgICAgICAgICB0aGlzLnJlZiA9IHJlZjtcbiAgICAgICAgICAgIHRoaXMuYWZzID0gYWZzO1xuICAgICAgICB9XG4gICAgICAgIEFuZ3VsYXJGaXJlc3RvcmVEb2N1bWVudC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKGRhdGEsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlZi5zZXQoZGF0YSwgb3B0aW9ucyk7XG4gICAgICAgIH07XG4gICAgICAgIEFuZ3VsYXJGaXJlc3RvcmVEb2N1bWVudC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlZi51cGRhdGUoZGF0YSk7XG4gICAgICAgIH07XG4gICAgICAgIEFuZ3VsYXJGaXJlc3RvcmVEb2N1bWVudC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVmLmRlbGV0ZSgpO1xuICAgICAgICB9O1xuICAgICAgICBBbmd1bGFyRmlyZXN0b3JlRG9jdW1lbnQucHJvdG90eXBlLmNvbGxlY3Rpb24gPSBmdW5jdGlvbiAocGF0aCwgcXVlcnlGbikge1xuICAgICAgICAgICAgdmFyIGNvbGxlY3Rpb25SZWYgPSB0aGlzLnJlZi5jb2xsZWN0aW9uKHBhdGgpO1xuICAgICAgICAgICAgdmFyIF9hID0gYXNzb2NpYXRlUXVlcnkoY29sbGVjdGlvblJlZiwgcXVlcnlGbiksIHJlZiA9IF9hLnJlZiwgcXVlcnkgPSBfYS5xdWVyeTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQW5ndWxhckZpcmVzdG9yZUNvbGxlY3Rpb24ocmVmLCBxdWVyeSwgdGhpcy5hZnMpO1xuICAgICAgICB9O1xuICAgICAgICBBbmd1bGFyRmlyZXN0b3JlRG9jdW1lbnQucHJvdG90eXBlLnNuYXBzaG90Q2hhbmdlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBzY2hlZHVsZWRGcm9tRG9jUmVmJCA9IGZyb21Eb2NSZWYodGhpcy5yZWYsIHRoaXMuYWZzLnNjaGVkdWxlcnMub3V0c2lkZUFuZ3VsYXIpO1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlZEZyb21Eb2NSZWYkLnBpcGUodGhpcy5hZnMua2VlcFVuc3RhYmxlVW50aWxGaXJzdCk7XG4gICAgICAgIH07XG4gICAgICAgIEFuZ3VsYXJGaXJlc3RvcmVEb2N1bWVudC5wcm90b3R5cGUudmFsdWVDaGFuZ2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc25hcHNob3RDaGFuZ2VzKCkucGlwZShvcGVyYXRvcnMubWFwKGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWN0aW9uLnBheWxvYWQuZGF0YSgpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9O1xuICAgICAgICBBbmd1bGFyRmlyZXN0b3JlRG9jdW1lbnQucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gcnhqcy5mcm9tKHRoaXMucmVmLmdldChvcHRpb25zKSkucGlwZShvcGVyYXRvcnMub2JzZXJ2ZU9uKHRoaXMuYWZzLnNjaGVkdWxlcnMuaW5zaWRlQW5ndWxhcikpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gQW5ndWxhckZpcmVzdG9yZURvY3VtZW50O1xuICAgIH0oKSk7XG5cbiAgICB2YXIgQW5ndWxhckZpcmVzdG9yZUNvbGxlY3Rpb25Hcm91cCA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIEFuZ3VsYXJGaXJlc3RvcmVDb2xsZWN0aW9uR3JvdXAocXVlcnksIGFmcykge1xuICAgICAgICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xuICAgICAgICAgICAgdGhpcy5hZnMgPSBhZnM7XG4gICAgICAgIH1cbiAgICAgICAgQW5ndWxhckZpcmVzdG9yZUNvbGxlY3Rpb25Hcm91cC5wcm90b3R5cGUuc3RhdGVDaGFuZ2VzID0gZnVuY3Rpb24gKGV2ZW50cykge1xuICAgICAgICAgICAgaWYgKCFldmVudHMgfHwgZXZlbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkb2NDaGFuZ2VzKHRoaXMucXVlcnksIHRoaXMuYWZzLnNjaGVkdWxlcnMub3V0c2lkZUFuZ3VsYXIpLnBpcGUodGhpcy5hZnMua2VlcFVuc3RhYmxlVW50aWxGaXJzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZG9jQ2hhbmdlcyh0aGlzLnF1ZXJ5LCB0aGlzLmFmcy5zY2hlZHVsZXJzLm91dHNpZGVBbmd1bGFyKVxuICAgICAgICAgICAgICAgIC5waXBlKHRoaXMuYWZzLmtlZXBVbnN0YWJsZVVudGlsRmlyc3QsIG9wZXJhdG9ycy5tYXAoZnVuY3Rpb24gKGFjdGlvbnMpIHsgcmV0dXJuIGFjdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChjaGFuZ2UpIHsgcmV0dXJuIGV2ZW50cy5pbmRleE9mKGNoYW5nZS50eXBlKSA+IC0xOyB9KTsgfSksIG9wZXJhdG9ycy5maWx0ZXIoZnVuY3Rpb24gKGNoYW5nZXMpIHsgcmV0dXJuIGNoYW5nZXMubGVuZ3RoID4gMDsgfSkpO1xuICAgICAgICB9O1xuICAgICAgICBBbmd1bGFyRmlyZXN0b3JlQ29sbGVjdGlvbkdyb3VwLnByb3RvdHlwZS5hdWRpdFRyYWlsID0gZnVuY3Rpb24gKGV2ZW50cykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGVDaGFuZ2VzKGV2ZW50cykucGlwZShvcGVyYXRvcnMuc2NhbihmdW5jdGlvbiAoY3VycmVudCwgYWN0aW9uKSB7IHJldHVybiBjdXJyZW50LmNvbmNhdChhY3Rpb24pOyB9LCBbXSkpO1xuICAgICAgICB9O1xuICAgICAgICBBbmd1bGFyRmlyZXN0b3JlQ29sbGVjdGlvbkdyb3VwLnByb3RvdHlwZS5zbmFwc2hvdENoYW5nZXMgPSBmdW5jdGlvbiAoZXZlbnRzKSB7XG4gICAgICAgICAgICB2YXIgdmFsaWRhdGVkRXZlbnRzID0gdmFsaWRhdGVFdmVudHNBcnJheShldmVudHMpO1xuICAgICAgICAgICAgdmFyIHNjaGVkdWxlZFNvcnRlZENoYW5nZXMkID0gc29ydGVkQ2hhbmdlcyh0aGlzLnF1ZXJ5LCB2YWxpZGF0ZWRFdmVudHMsIHRoaXMuYWZzLnNjaGVkdWxlcnMub3V0c2lkZUFuZ3VsYXIpO1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlZFNvcnRlZENoYW5nZXMkLnBpcGUodGhpcy5hZnMua2VlcFVuc3RhYmxlVW50aWxGaXJzdCk7XG4gICAgICAgIH07XG4gICAgICAgIEFuZ3VsYXJGaXJlc3RvcmVDb2xsZWN0aW9uR3JvdXAucHJvdG90eXBlLnZhbHVlQ2hhbmdlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBmcm9tQ29sbGVjdGlvblJlZlNjaGVkdWxlZCQgPSBmcm9tQ29sbGVjdGlvblJlZih0aGlzLnF1ZXJ5LCB0aGlzLmFmcy5zY2hlZHVsZXJzLm91dHNpZGVBbmd1bGFyKTtcbiAgICAgICAgICAgIHJldHVybiBmcm9tQ29sbGVjdGlvblJlZlNjaGVkdWxlZCRcbiAgICAgICAgICAgICAgICAucGlwZSh0aGlzLmFmcy5rZWVwVW5zdGFibGVVbnRpbEZpcnN0LCBvcGVyYXRvcnMubWFwKGZ1bmN0aW9uIChhY3Rpb25zKSB7IHJldHVybiBhY3Rpb25zLnBheWxvYWQuZG9jcy5tYXAoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEuZGF0YSgpOyB9KTsgfSkpO1xuICAgICAgICB9O1xuICAgICAgICBBbmd1bGFyRmlyZXN0b3JlQ29sbGVjdGlvbkdyb3VwLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIHJ4anMuZnJvbSh0aGlzLnF1ZXJ5LmdldChvcHRpb25zKSkucGlwZShvcGVyYXRvcnMub2JzZXJ2ZU9uKHRoaXMuYWZzLnNjaGVkdWxlcnMuaW5zaWRlQW5ndWxhcikpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gQW5ndWxhckZpcmVzdG9yZUNvbGxlY3Rpb25Hcm91cDtcbiAgICB9KCkpO1xuXG4gICAgdmFyIF9fZGVjb3JhdGUgPSAodW5kZWZpbmVkICYmIHVuZGVmaW5lZC5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICAgICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICAgICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICAgICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICAgICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbiAgICB9O1xuICAgIHZhciBfX21ldGFkYXRhID0gKHVuZGVmaW5lZCAmJiB1bmRlZmluZWQuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xuICAgIH07XG4gICAgdmFyIF9fcGFyYW0gPSAodW5kZWZpbmVkICYmIHVuZGVmaW5lZC5fX3BhcmFtKSB8fCBmdW5jdGlvbiAocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxuICAgIH07XG4gICAgdmFyIEVuYWJsZVBlcnNpc3RlbmNlVG9rZW4gPSBuZXcgY29yZS5JbmplY3Rpb25Ub2tlbignYW5ndWxhcmZpcmUyLmVuYWJsZUZpcmVzdG9yZVBlcnNpc3RlbmNlJyk7XG4gICAgdmFyIFBlcnNpc3RlbmNlU2V0dGluZ3NUb2tlbiA9IG5ldyBjb3JlLkluamVjdGlvblRva2VuKCdhbmd1bGFyZmlyZTIuZmlyZXN0b3JlLnBlcnNpc3RlbmNlU2V0dGluZ3MnKTtcbiAgICB2YXIgRmlyZXN0b3JlU2V0dGluZ3NUb2tlbiA9IG5ldyBjb3JlLkluamVjdGlvblRva2VuKCdhbmd1bGFyZmlyZTIuZmlyZXN0b3JlLnNldHRpbmdzJyk7XG4gICAgdmFyIEVOQUJMRV9QRVJTSVNURU5DRSA9IEVuYWJsZVBlcnNpc3RlbmNlVG9rZW47XG4gICAgdmFyIFBFUlNJU1RFTkNFX1NFVFRJTkdTID0gUGVyc2lzdGVuY2VTZXR0aW5nc1Rva2VuO1xuICAgIHZhciBTRVRUSU5HUyA9IEZpcmVzdG9yZVNldHRpbmdzVG9rZW47XG4gICAgdmFyIG1ham9yID0gcGFyc2VJbnQoZmlyZWJhc2UuU0RLX1ZFUlNJT04uc3BsaXQoJy4nKVswXSk7XG4gICAgdmFyIG1pbm9yID0gcGFyc2VJbnQoZmlyZWJhc2UuU0RLX1ZFUlNJT04uc3BsaXQoJy4nKVsxXSk7XG4gICAgdmFyIERlZmF1bHRGaXJlc3RvcmVTZXR0aW5ncyA9ICgobWFqb3IgPCA1IHx8IChtYWpvciA9PSA1ICYmIG1pbm9yIDwgOCkpID8geyB0aW1lc3RhbXBzSW5TbmFwc2hvdHM6IHRydWUgfSA6IHt9KTtcbiAgICBmdW5jdGlvbiBhc3NvY2lhdGVRdWVyeShjb2xsZWN0aW9uUmVmLCBxdWVyeUZuKSB7XG4gICAgICAgIGlmIChxdWVyeUZuID09PSB2b2lkIDApIHsgcXVlcnlGbiA9IGZ1bmN0aW9uIChyZWYpIHsgcmV0dXJuIHJlZjsgfTsgfVxuICAgICAgICB2YXIgcXVlcnkgPSBxdWVyeUZuKGNvbGxlY3Rpb25SZWYpO1xuICAgICAgICB2YXIgcmVmID0gY29sbGVjdGlvblJlZjtcbiAgICAgICAgcmV0dXJuIHsgcXVlcnk6IHF1ZXJ5LCByZWY6IHJlZiB9O1xuICAgIH1cbiAgICB2YXIgQW5ndWxhckZpcmVzdG9yZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIEFuZ3VsYXJGaXJlc3RvcmUob3B0aW9ucywgbmFtZU9yQ29uZmlnLCBzaG91bGRFbmFibGVQZXJzaXN0ZW5jZSwgc2V0dGluZ3MsIHBsYXRmb3JtSWQsIHpvbmUsIHBlcnNpc3RlbmNlU2V0dGluZ3MpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB0aGlzLnNjaGVkdWxlcnMgPSBuZXcgZmlyZS7JtUFuZ3VsYXJGaXJlU2NoZWR1bGVycyh6b25lKTtcbiAgICAgICAgICAgIHRoaXMua2VlcFVuc3RhYmxlVW50aWxGaXJzdCA9IGZpcmUuybVrZWVwVW5zdGFibGVVbnRpbEZpcnN0RmFjdG9yeSh0aGlzLnNjaGVkdWxlcnMsIHBsYXRmb3JtSWQpO1xuICAgICAgICAgICAgdGhpcy5maXJlc3RvcmUgPSB6b25lLnJ1bk91dHNpZGVBbmd1bGFyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXBwID0gZmlyZS5fZmlyZWJhc2VBcHBGYWN0b3J5KG9wdGlvbnMsIHpvbmUsIG5hbWVPckNvbmZpZyk7XG4gICAgICAgICAgICAgICAgdmFyIGZpcmVzdG9yZSQkMSA9IGFwcC5maXJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgICBmaXJlc3RvcmUkJDEuc2V0dGluZ3Moc2V0dGluZ3MgfHwgRGVmYXVsdEZpcmVzdG9yZVNldHRpbmdzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlyZXN0b3JlJCQxO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoc2hvdWxkRW5hYmxlUGVyc2lzdGVuY2UgJiYgIWNvbW1vbi5pc1BsYXRmb3JtU2VydmVyKHBsYXRmb3JtSWQpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVuYWJsZVBlcnNpc3RlbmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJ4anMuZnJvbShfdGhpcy5maXJlc3RvcmUuZW5hYmxlUGVyc2lzdGVuY2UocGVyc2lzdGVuY2VTZXR0aW5ncyB8fCB1bmRlZmluZWQpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH0pKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJ4anMub2YoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLnBlcnNpc3RlbmNlRW5hYmxlZCQgPSB6b25lLnJ1bk91dHNpZGVBbmd1bGFyKGVuYWJsZVBlcnNpc3RlbmNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucGVyc2lzdGVuY2VFbmFibGVkJCA9IHJ4anMub2YoZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIEFuZ3VsYXJGaXJlc3RvcmUucHJvdG90eXBlLmNvbGxlY3Rpb24gPSBmdW5jdGlvbiAocGF0aE9yUmVmLCBxdWVyeUZuKSB7XG4gICAgICAgICAgICB2YXIgY29sbGVjdGlvblJlZjtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGF0aE9yUmVmID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25SZWYgPSB0aGlzLmZpcmVzdG9yZS5jb2xsZWN0aW9uKHBhdGhPclJlZik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uUmVmID0gcGF0aE9yUmVmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIF9hID0gYXNzb2NpYXRlUXVlcnkoY29sbGVjdGlvblJlZiwgcXVlcnlGbiksIHJlZiA9IF9hLnJlZiwgcXVlcnkgPSBfYS5xdWVyeTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQW5ndWxhckZpcmVzdG9yZUNvbGxlY3Rpb24ocmVmLCBxdWVyeSwgdGhpcyk7XG4gICAgICAgIH07XG4gICAgICAgIEFuZ3VsYXJGaXJlc3RvcmUucHJvdG90eXBlLmNvbGxlY3Rpb25Hcm91cCA9IGZ1bmN0aW9uIChjb2xsZWN0aW9uSWQsIHF1ZXJ5R3JvdXBGbikge1xuICAgICAgICAgICAgaWYgKG1ham9yIDwgNikge1xuICAgICAgICAgICAgICAgIHRocm93IFwiY29sbGVjdGlvbiBncm91cCBxdWVyaWVzIHJlcXVpcmUgRmlyZWJhc2UgSlMgU0RLID49IDYuMFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHF1ZXJ5Rm4gPSBxdWVyeUdyb3VwRm4gfHwgKGZ1bmN0aW9uIChyZWYpIHsgcmV0dXJuIHJlZjsgfSk7XG4gICAgICAgICAgICB2YXIgZmlyZXN0b3JlJCQxID0gdGhpcy5maXJlc3RvcmU7XG4gICAgICAgICAgICB2YXIgY29sbGVjdGlvbkdyb3VwID0gZmlyZXN0b3JlJCQxLmNvbGxlY3Rpb25Hcm91cChjb2xsZWN0aW9uSWQpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBBbmd1bGFyRmlyZXN0b3JlQ29sbGVjdGlvbkdyb3VwKHF1ZXJ5Rm4oY29sbGVjdGlvbkdyb3VwKSwgdGhpcyk7XG4gICAgICAgIH07XG4gICAgICAgIEFuZ3VsYXJGaXJlc3RvcmUucHJvdG90eXBlLmRvYyA9IGZ1bmN0aW9uIChwYXRoT3JSZWYpIHtcbiAgICAgICAgICAgIHZhciByZWY7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHBhdGhPclJlZiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZWYgPSB0aGlzLmZpcmVzdG9yZS5kb2MocGF0aE9yUmVmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlZiA9IHBhdGhPclJlZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgQW5ndWxhckZpcmVzdG9yZURvY3VtZW50KHJlZiwgdGhpcyk7XG4gICAgICAgIH07XG4gICAgICAgIEFuZ3VsYXJGaXJlc3RvcmUucHJvdG90eXBlLmNyZWF0ZUlkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlyZXN0b3JlLmNvbGxlY3Rpb24oJ18nKS5kb2MoKS5pZDtcbiAgICAgICAgfTtcbiAgICAgICAgQW5ndWxhckZpcmVzdG9yZSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICAgICAgY29yZS5JbmplY3RhYmxlKCksXG4gICAgICAgICAgICBfX3BhcmFtKDAsIGNvcmUuSW5qZWN0KGZpcmUuRklSRUJBU0VfT1BUSU9OUykpLFxuICAgICAgICAgICAgX19wYXJhbSgxLCBjb3JlLk9wdGlvbmFsKCkpLCBfX3BhcmFtKDEsIGNvcmUuSW5qZWN0KGZpcmUuRklSRUJBU0VfQVBQX05BTUUpKSxcbiAgICAgICAgICAgIF9fcGFyYW0oMiwgY29yZS5PcHRpb25hbCgpKSwgX19wYXJhbSgyLCBjb3JlLkluamVjdChFTkFCTEVfUEVSU0lTVEVOQ0UpKSxcbiAgICAgICAgICAgIF9fcGFyYW0oMywgY29yZS5PcHRpb25hbCgpKSwgX19wYXJhbSgzLCBjb3JlLkluamVjdChTRVRUSU5HUykpLFxuICAgICAgICAgICAgX19wYXJhbSg0LCBjb3JlLkluamVjdChjb3JlLlBMQVRGT1JNX0lEKSksXG4gICAgICAgICAgICBfX3BhcmFtKDYsIGNvcmUuT3B0aW9uYWwoKSksIF9fcGFyYW0oNiwgY29yZS5JbmplY3QoUEVSU0lTVEVOQ0VfU0VUVElOR1MpKSxcbiAgICAgICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbT2JqZWN0LCBPYmplY3QsIE9iamVjdCwgT2JqZWN0LCBPYmplY3QsXG4gICAgICAgICAgICAgICAgY29yZS5OZ1pvbmUsIE9iamVjdF0pXG4gICAgICAgIF0sIEFuZ3VsYXJGaXJlc3RvcmUpO1xuICAgICAgICByZXR1cm4gQW5ndWxhckZpcmVzdG9yZTtcbiAgICB9KCkpO1xuXG4gICAgdmFyIF9fZGVjb3JhdGUkMSA9ICh1bmRlZmluZWQgJiYgdW5kZWZpbmVkLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgICAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgICAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgICAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgICAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xuICAgIH07XG4gICAgdmFyIEFuZ3VsYXJGaXJlc3RvcmVNb2R1bGUgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBBbmd1bGFyRmlyZXN0b3JlTW9kdWxlKCkge1xuICAgICAgICB9XG4gICAgICAgIEFuZ3VsYXJGaXJlc3RvcmVNb2R1bGVfMSA9IEFuZ3VsYXJGaXJlc3RvcmVNb2R1bGU7XG4gICAgICAgIEFuZ3VsYXJGaXJlc3RvcmVNb2R1bGUuZW5hYmxlUGVyc2lzdGVuY2UgPSBmdW5jdGlvbiAocGVyc2lzdGVuY2VTZXR0aW5ncykge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBuZ01vZHVsZTogQW5ndWxhckZpcmVzdG9yZU1vZHVsZV8xLFxuICAgICAgICAgICAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAgICAgICAgICAgICB7IHByb3ZpZGU6IEVuYWJsZVBlcnNpc3RlbmNlVG9rZW4sIHVzZVZhbHVlOiB0cnVlIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgcHJvdmlkZTogUGVyc2lzdGVuY2VTZXR0aW5nc1Rva2VuLCB1c2VWYWx1ZTogcGVyc2lzdGVuY2VTZXR0aW5ncyB9LFxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHZhciBBbmd1bGFyRmlyZXN0b3JlTW9kdWxlXzE7XG4gICAgICAgIEFuZ3VsYXJGaXJlc3RvcmVNb2R1bGUgPSBBbmd1bGFyRmlyZXN0b3JlTW9kdWxlXzEgPSBfX2RlY29yYXRlJDEoW1xuICAgICAgICAgICAgY29yZS5OZ01vZHVsZSh7XG4gICAgICAgICAgICAgICAgcHJvdmlkZXJzOiBbQW5ndWxhckZpcmVzdG9yZV1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIF0sIEFuZ3VsYXJGaXJlc3RvcmVNb2R1bGUpO1xuICAgICAgICByZXR1cm4gQW5ndWxhckZpcmVzdG9yZU1vZHVsZTtcbiAgICB9KCkpO1xuXG4gICAgZXhwb3J0cy5FbmFibGVQZXJzaXN0ZW5jZVRva2VuID0gRW5hYmxlUGVyc2lzdGVuY2VUb2tlbjtcbiAgICBleHBvcnRzLlBlcnNpc3RlbmNlU2V0dGluZ3NUb2tlbiA9IFBlcnNpc3RlbmNlU2V0dGluZ3NUb2tlbjtcbiAgICBleHBvcnRzLkZpcmVzdG9yZVNldHRpbmdzVG9rZW4gPSBGaXJlc3RvcmVTZXR0aW5nc1Rva2VuO1xuICAgIGV4cG9ydHMuRU5BQkxFX1BFUlNJU1RFTkNFID0gRU5BQkxFX1BFUlNJU1RFTkNFO1xuICAgIGV4cG9ydHMuUEVSU0lTVEVOQ0VfU0VUVElOR1MgPSBQRVJTSVNURU5DRV9TRVRUSU5HUztcbiAgICBleHBvcnRzLlNFVFRJTkdTID0gU0VUVElOR1M7XG4gICAgZXhwb3J0cy5EZWZhdWx0RmlyZXN0b3JlU2V0dGluZ3MgPSBEZWZhdWx0RmlyZXN0b3JlU2V0dGluZ3M7XG4gICAgZXhwb3J0cy5hc3NvY2lhdGVRdWVyeSA9IGFzc29jaWF0ZVF1ZXJ5O1xuICAgIGV4cG9ydHMuQW5ndWxhckZpcmVzdG9yZSA9IEFuZ3VsYXJGaXJlc3RvcmU7XG4gICAgZXhwb3J0cy5Bbmd1bGFyRmlyZXN0b3JlTW9kdWxlID0gQW5ndWxhckZpcmVzdG9yZU1vZHVsZTtcbiAgICBleHBvcnRzLnZhbGlkYXRlRXZlbnRzQXJyYXkgPSB2YWxpZGF0ZUV2ZW50c0FycmF5O1xuICAgIGV4cG9ydHMuQW5ndWxhckZpcmVzdG9yZUNvbGxlY3Rpb24gPSBBbmd1bGFyRmlyZXN0b3JlQ29sbGVjdGlvbjtcbiAgICBleHBvcnRzLkFuZ3VsYXJGaXJlc3RvcmVDb2xsZWN0aW9uR3JvdXAgPSBBbmd1bGFyRmlyZXN0b3JlQ29sbGVjdGlvbkdyb3VwO1xuICAgIGV4cG9ydHMuQW5ndWxhckZpcmVzdG9yZURvY3VtZW50ID0gQW5ndWxhckZpcmVzdG9yZURvY3VtZW50O1xuICAgIGV4cG9ydHMuZG9jQ2hhbmdlcyA9IGRvY0NoYW5nZXM7XG4gICAgZXhwb3J0cy5zb3J0ZWRDaGFuZ2VzID0gc29ydGVkQ2hhbmdlcztcbiAgICBleHBvcnRzLmNvbWJpbmVDaGFuZ2VzID0gY29tYmluZUNoYW5nZXM7XG4gICAgZXhwb3J0cy5jb21iaW5lQ2hhbmdlID0gY29tYmluZUNoYW5nZTtcbiAgICBleHBvcnRzLmZyb21SZWYgPSBmcm9tUmVmO1xuICAgIGV4cG9ydHMuZnJvbURvY1JlZiA9IGZyb21Eb2NSZWY7XG4gICAgZXhwb3J0cy5mcm9tQ29sbGVjdGlvblJlZiA9IGZyb21Db2xsZWN0aW9uUmVmO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSkpKTtcbiJdfQ==